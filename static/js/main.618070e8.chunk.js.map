{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","i","Card","key","searchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","Header_Header","SearchBox","components_Scroll","ErrorBoundary_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.618070e8.chunk.js","sourcesContent":["import React from 'react';\n\nconst card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-card dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <h1>RoboFriends</h1>\n            <div>\n                <img src={`https://robohash.org/${id}?200x200`}alt='robots'/>\n                <div>\n                    <h2>{name}</h2>\n                    <h2>{email}</h2>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n           { robots.map((robot, i) => <Card key={i} id={robot.id} name={robot.name} email={robot.email} />) }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst searchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                    id='searchbox'\n                    aria-label=\"searchbox\"\n                    className='pa3 ba b--green bg-lightest-blue'\n                    type='search'\n                    placeholder='search robots'\n                    onChange = {searchChange}\n                />\n        </div>\n    );\n}\n\nexport default searchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '5px solid #2EA0D6', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n    \n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good!</h1>\n        }\n        return this.props.children;\n    }\n}","import React, { Component } from 'react';\n\nexport default class Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        return <h1 className='f1'>Robofirends</h1>;\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        return isPending ? <h1>Loading</h1> :(\n            <div className='tc'>\n                <Header/>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filterRobots} />   \n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n  }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n   } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    robots: [],\n    isPending: false,\n    error: ''\n  }\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, {isPending: true})\n      case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, {robots: action.payload, isPending: false})\n      case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, {error: action.payload})\n      default:\n        return state\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {  Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { requestRobots, searchRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({requestRobots, searchRobots})\nconst store = createStore(rootReducers, applyMiddleware(logger, thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}